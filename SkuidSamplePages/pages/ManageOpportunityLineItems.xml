<skuidpage showsidebar="false" showheader="true" tabtooverride="Opportunity">
   <resources>
      <labels/>
      <javascript>
         <jsitem location="inlinesnippet" name="quantityRenderer" url="">var field = arguments[0],
    value = arguments[1];

if (field.mode == 'read') {
    skuid.ui.fieldRenderers.DOUBLE.read(field,value);
} else {

    skuid.ui.fieldRenderers.DOUBLE.edit(field,value);

    skuid.utils.delayInputCallback(
        field.element.find('input'),
        function(newValue) {
            // Force updates of the UnitPrice (Sales Price) field
            field.model.updateRow(field.row,'UnitPrice',field.model.getFieldValue(field.row,'UnitPrice'));
        }
    );

}</jsitem>
         <jsitem location="inlinesnippet" name="pricebookEntryRenderer" url="">var field = arguments[0],
    value = arguments[1],
    renderer = skuid.ui.fieldRenderers[field.metadata.displaytype],
    mode = field.mode;

// Get the pricebook entries model we are using for the renderer
var pricebookEntriesModel = skuid.model.getModel(field.options.optionmodel);

if (mode == 'edit') {
    // Specify that we want to display our field as a Picklist
    field.options.type = 'REFPICK';
}

// Run standard renderer for the current mode
// (applies to read/edit mode)
renderer[mode](field,value);

// Function that will update the value of our LineItem row's UnitPrice field
// based on the selected PricebookEntry's ListPrice / UnitPrice
var updateUnitPriceField = function(){

    // Find the selected PricebookEntryId
    var newEntryId = field.model.getFieldValue(field.row,'PricebookEntryId');
    // Find the corresponding PricebookEntry record
    var entry = pricebookEntriesModel.getRowById(newEntryId);
    var newPrice = pricebookEntriesModel.getFieldValue(entry,'UnitPrice');

    // Force updates of the UnitPrice (SalesPrice) field 
    //with the newly-selected PricebookEntry's UnitPrice field
    field.model.updateRow(field.row,'UnitPrice',newPrice);

    // Rerender the UnitPrice field in the row,
    // if that field has been rendered.
    var item = field.editor.lists[0].renderedItems[field.row.Id];
    if (item) {
        $j.each(item.fields,function(i,f){
            if (f.id == 'UnitPrice') {
                f.render();
                return false;
            }
        });
    }
};

if (mode == 'edit') {

    // If we do not yet have a value for our UnitPrice field,
    // update it.
    if (!field.model.getFieldValue(field.row,'UnitPrice')) {
        updateUnitPriceField();
    }

    // Attach an event handler to our field's &lt;select&gt; picklist element
    var select = field.element.find('select');
    select.on('change',function(){
        updateUnitPriceField();
    });

}</jsitem>
         <jsitem location="inlinesnippet" name="cloneRecord" url="">var params = arguments[0],
    item = params.item,
    row = item.row,
    model = params.model,
    $ = skuid.$;

// Create a new row in our table
var newRow = model.createRow();

// Put in default values from the fields in our current row
if (row) {
    $.each(row,function(fieldId,val) {
        // Only allow fields that are Objects,
        // or that are Createable
        if ((fieldId != 'attributes') &amp;&amp; (val != null) &amp;&amp; (fieldId != 'Id') &amp;&amp; (fieldId != 'TotalPrice')) {
    		var modelField = model.getField(fieldId);
            if ((typeof val === 'object') 
            || (modelField &amp;&amp; modelField.createable)) {
                model.updateRow(newRow,fieldId,val);
            }
    	}
    });
}

// Force all registered lists to put our row into edit mode
$.each(model.registeredLists,function(){
    // See if this item has been rendered in this list yet
    var newItem = this.renderedItems[newRow.Id];
    if (newItem) {
        newItem.mode = 'edit';
        newItem.refreshFields();
    }
});

</jsitem>
         <jsitem location="inlinesnippet" name="totalPriceRenderer" cachelocation="false">var $ = skuid.$;

var FIELDS_TO_LISTEN_ON = ['Quantity','UnitPrice','Discount'];

var field = arguments[0],
    value = arguments[1],
    row = field.row,
    listener;

skuid.ui.fieldRenderers.DOUBLE[field.mode](field,value);

// Register a listener so that if any of FIELDS_TO_LISTEN_ON are updated,
// then we will update ourself as well.

if (!listener) {
    
    listener = new skuid.ui.Field(row,field.model,null,{register:false});

    var showTotalPrice = function(){

        var quantity = row.Quantity || 0,
            price = row.UnitPrice || 0.0,
            discount = row.Discount || 0.0,
            total = ((quantity * price) * (100 - discount)) / 100.0;
        
        field.model.updateRow(row,'TotalPrice',total);

        field.element.empty();
        skuid.ui.fieldRenderers.DOUBLE.readonly(field,total);
        
        // Remove the changes entry for TotalPrice,
        // because Salesforce throws a fit if both UnitPrice and TotalPrice
        // are specified in an update call.
        var changesRow = field.model.changes[row.Id];
        if ('TotalPrice' in changesRow) {
            delete changesRow['TotalPrice'];
        }
    }

    listener.handleChange = function(){ showTotalPrice(); };
    listener.render = function() {};

    skuid.$.each(FIELDS_TO_LISTEN_ON,function(i,fieldToRegisterOn){
        field.model.registerField(listener,fieldToRegisterOn);
    });

    setTimeout(function(){
        // If there is already a changes row for this item,
        // then calculate the total price
        if (field.model.changes[field.row.Id]) {
            showTotalPrice();
        }
    },100);
}</jsitem>
      </javascript>
      <css/>
   </resources>
   <models>
      <model id="Opportunity" limit="1" query="true" createrowifnonefound="false" sobject="Opportunity">
         <fields>
            <field id="Name"/>
            <field id="StageName"/>
            <field id="CloseDate"/>
            <field id="Amount"/>
            <field id="AccountId"/>
            <field id="Account.Name"/>
            <field id="CreatedById"/>
            <field id="CreatedDate"/>
            <field id="CreatedBy.Name"/>
            <field id="Description"/>
            <field id="HasOpportunityLineItem"/>
            <field id="LeadSource"/>
            <field id="NextStep"/>
            <field id="Type"/>
            <field id="OwnerId"/>
            <field id="Owner.Name"/>
            <field id="Pricebook2Id"/>
            <field id="Pricebook2.Name"/>
            <field id="Probability"/>
            <field id="TotalOpportunityQuantity"/>
            <field id="LastModifiedById"/>
            <field id="LastModifiedDate"/>
            <field id="LastModifiedBy.Name"/>
            <field id="CampaignId"/>
            <field id="Campaign.Name"/>
            <field id="IsClosed"/>
            <field id="Contract_Start_Date__c"/>
         </fields>
         <conditions>
            <condition type="param" enclosevalueinquotes="true" operator="=" value="id" field="Id" novaluebehavior="noquery"/>
         </conditions>
      </model>
      <model id="PricebookEntries" limit="100" query="true" createrowifnonefound="false" orderby="" sobject="PricebookEntry">
         <fields>
            <field id="Id"/>
            <field id="UnitPrice"/>
            <field id="Product2Id"/>
            <field id="Product2.Name"/>
         </fields>
         <conditions>
            <condition type="fieldvalue" value="true" enclosevalueinquotes="false" field="IsActive"/>
            <condition type="modelmerge" value="" field="Pricebook2Id" operator="=" model="Opportunity" enclosevalueinquotes="true" mergefield="Pricebook2Id" novaluebehavior="deactivate"/>
         </conditions>
      </model>
      <model id="LineItems" limit="" query="true" createrowifnonefound="false" sobject="OpportunityLineItem" orderby="SortOrder, PricebookEntry.Product2.Name">
         <fields>
            <field id="SortOrder"/>
            <field id="UnitPrice"/>
            <field id="Subtotal"/>
            <field id="TotalPrice"/>
            <field id="Quantity"/>
            <field id="Description"/>
            <field id="ListPrice"/>
            <field id="ServiceDate"/>
            <field id="PricebookEntry.Product2Id"/>
            <field id="PricebookEntry.Product2.Name"/>
            <field id="PricebookEntryId"/>
            <field id="PricebookEntry.UnitPrice"/>
            <field id="Discount"/>
         </fields>
         <conditions>
            <condition type="param" enclosevalueinquotes="true" operator="=" value="id" field="OpportunityId"/>
         </conditions>
      </model>
   </models>
   <components>
      <pagetitle model="Opportunity">
         <maintitle>Edit Opportunity Products: {{Name}}</maintitle>
         <subtitle>
            <template>{{Model.Label}}</template>
         </subtitle>
         <actions>
            <action type="save" label="Save" window="self" afterSave="/{{Id}}" icon="ui-silk-accept">
               <models>
                  <model>LineItems</model>
               </models>
            </action>
            <action type="cancel" label="Cancel" window="self" icon="ui-silk-cancel" afterCancel="/{{Id}}">
               <renderconditions/>
            </action>
         </actions>
      </pagetitle>
      <skootable showconditions="true" showsavecancel="false" searchbox="true" searchmethod="server" showexportbuttons="false" pagesize="10" createrecords="true" model="LineItems" mode="edit">
         <fields>
            <field id="PricebookEntryId" type="CUSTOM" optionsource="model" optionmodel="PricebookEntries" displaytemplate="{{Product2.Name}} (List: {{UnitPrice}})" snippet="pricebookEntryRenderer" required="true">
               <label>Product</label>
               <filters>
                  <filter type="modelmerge" operator="=" field="Pricebook2Id" value="" model="Opportunity" enclosevalueinquotes="true" mergefield="Pricebook2Id" novaluebehavior="deactivate"/>
               </filters>
            </field>
            <field id="ServiceDate" required="true"/>
            <field id="Quantity" type="CUSTOM" snippet="quantityRenderer"/>
            <field id="UnitPrice" required="true"/>
            <field id="Description"/>
            <field id="Discount" type=""/>
            <field id="TotalPrice" readonly="true" type="CUSTOM" snippet="totalPriceRenderer">
               <summaries>
                  <summary>sum</summary>
               </summaries>
            </field>
         </fields>
         <rowactions>
            <action type="edit"/>
            <action type="delete"/>
            <action type="custom" snippet="cloneRecord" label="Clone Product" icon="ui-silk-arrow-divide"/>
         </rowactions>
         <massactions usefirstitemasdefault="true">
            <action type="massupdate"/>
            <action type="massdelete"/>
         </massactions>
         <views>
            <view type="standard"/>
         </views>
         <actions defaultlabel="Global Actions" defaulticon="ui-silk-wand" usefirstitemasdefault="true">
         </actions>
      </skootable>
   </components>
</skuidpage>
